<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


    <http pattern="/index.do" security="none"/>
    <http pattern="/search.do" security="none"/>
    <http pattern="/pay/notify.do" security="none"/>


</beans:beans>
<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans:beans xmlns="http://www.springframework.org/schema/security"-->
<!--	xmlns:beans="http://www.springframework.org/schema/beans"-->
<!--	xmlns:context="http://www.springframework.org/schema/context"-->
<!--             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
<!--	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd-->
<!--	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd-->
<!--						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">-->
<!--	-->
<!--	&lt;!&ndash;  -->
<!--		需要修改的配置：-->
<!--		1、*pattern 放弃认证，允许用户不登录也可以访问， 如：css  js 等资源-->
<!--		2、单点登录服务器登录URL， 根据当前 CAS的服务（war）的地址  如： http://localhost:9100/cas/login-->
<!--		3、 service 配置自身工程的根地址+/login/cas 回调， key= service 是固定的  如：http://localhost:9003/login/cas-->
<!--		4、userDetailsService： 是需要当前我们自定义的 类 （实现了UserDetailsService的接口），作用： 授权无需对用户名和密码校验-->
<!--		5、 ticketValidator认证服务地址 cas， ticket校验的类 ，  CAS的服务 ：  http://localhost:9100/cas-->
<!--		6、当前单点退出的回调地址，如：value="http://localhost:9100/cas/logout?service=http://localhost:9003/index2.html"-->
<!--		      访问退出的地址是：  http://localhost:9003/logout/cas -->
<!--	&ndash;&gt;-->

<!--&lt;!&ndash;    加载配置文件&ndash;&gt;-->
<!--	<context:property-placeholder location="classpath*:*.properties"/>-->

<!--&lt;!&ndash;    放行拦截&ndash;&gt;-->
<!--	<http pattern="/css/**" security="none"/>-->
<!--	<http pattern="/js/**" security="none"/>-->
<!--	<http pattern="/img/**" security="none"/>-->

<!--	&lt;!&ndash;   entry-point-ref  入口点引用 &ndash;&gt;-->
<!--	<http use-expressions="false" entry-point-ref="casProcessingFilterEntryPoint">-->
<!--        &lt;!&ndash;IS_AUTHENTICATED_ANONYMOUSLY 代表可以匿名访问&ndash;&gt;-->
<!--&lt;!&ndash;        该配置必须在/**配置之前，否则无效，首页用户名可匿名访问，不放在<http></http>中是因为，-->
<!--            在http中，该资源直接绕行security，当后台使用上下文获取用户名是，无论用户是否登录都为null并空指针异常&ndash;&gt;-->
<!--        <intercept-url pattern="/login/username.do" access="IS_AUTHENTICATED_ANONYMOUSLY"/>-->
<!--        <intercept-url pattern="/**" access="ROLE_USER"/>   -->
<!--        <csrf disabled="true"/>  -->
<!--        &lt;!&ndash; custom-filter为过滤器，-->
<!--         position 表示将过滤器放在指定的位置上，-->
<!--         before表示放在指定位置之前  ，-->
<!--         after表示放在指定的位置之后  &ndash;&gt;           -->
<!--        <custom-filter ref="casAuthenticationFilter"  position="CAS_FILTER" />      -->
<!--        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>  -->
<!--        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>  -->
<!--    </http>-->
<!--    -->
<!--  	&lt;!&ndash; CAS入口点 开始   处理登录问题&ndash;&gt;-->
<!--    <beans:bean id="casProcessingFilterEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">  -->
<!--        &lt;!&ndash; 需要修改：单点登录服务器登录URL &ndash;&gt;  -->
<!--        <beans:property name="loginUrl" value="${cas_url}/login"/>-->
<!--        <beans:property name="serviceProperties" ref="serviceProperties"/>  -->
<!--    </beans:bean>      -->
<!--    <beans:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">  -->
<!--        &lt;!&ndash;需要修改： service 配置自身工程的根地址+/login/cas   &ndash;&gt;  -->
<!--        <beans:property name="service" value="${service_url}/login/cas "/>-->
<!--    </beans:bean>  -->
<!--    &lt;!&ndash; CAS入口点 结束 &ndash;&gt;-->

<!--    -->
<!--    &lt;!&ndash; 认证过滤器 开始 &ndash;&gt;-->
<!--    <beans:bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">  -->
<!--        <beans:property name="authenticationManager" ref="authenticationManager"/>  -->
<!--    </beans:bean>  -->
<!--		&lt;!&ndash; 认证管理器 &ndash;&gt;-->
<!--	<authentication-manager alias="authenticationManager">-->
<!--		<authentication-provider  ref="casAuthenticationProvider">-->
<!--		</authentication-provider>-->
<!--	</authentication-manager>-->
<!--		&lt;!&ndash; 认证提供者 &ndash;&gt;-->
<!--	<beans:bean id="casAuthenticationProvider"     class="org.springframework.security.cas.authentication.CasAuthenticationProvider">  -->
<!--        <beans:property name="authenticationUserDetailsService">  -->
<!--            <beans:bean class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">  -->
<!--           		&lt;!&ndash; CAS 负责是： 用户认证的工作，   Security 负责是： 校验权限问题 &ndash;&gt;-->
<!--                <beans:constructor-arg ref="userDetailsService" />  -->
<!--            </beans:bean>  -->
<!--        </beans:property>  -->
<!--        <beans:property name="serviceProperties" ref="serviceProperties"/>  -->
<!--        &lt;!&ndash; ticketValidator 为票据验证器 &ndash;&gt;-->
<!--        <beans:property name="ticketValidator">  -->
<!--            <beans:bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">  -->
<!--            	&lt;!&ndash; 需要修改： ticketValidator认证服务地址 cas &ndash;&gt;-->
<!--                <beans:constructor-arg index="0" value="${cas_url}"/>-->
<!--            </beans:bean>  -->
<!--        </beans:property>  -->
<!--        <beans:property name="key" value="an_id_for_this_auth_provider_only"/> -->
<!--    </beans:bean>        -->
<!--   		 &lt;!&ndash; 需要修改： 认证类 &ndash;&gt;-->
<!--	<beans:bean id="userDetailsService" class="com.qingcheng.service.UserDetailServiceImpl"/>-->
<!--	&lt;!&ndash; 认证过滤器 结束 &ndash;&gt;-->
<!--	-->
<!--	&lt;!&ndash; 单点登出  开始  &ndash;&gt;     -->
<!--    <beans:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>          -->
<!--    <beans:bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">  -->
<!--    	&lt;!&ndash; 需要修改 ： sso 退出后跳转的地址 ， 参数service是固定参数-->
<!--    		配置 filterProcessesUrl的目的是 当前项目直接调用 /logout/cas -->
<!--    		后会自动跳转到service的目标网址-->
<!--    	&ndash;&gt;-->
<!--        <beans:constructor-arg value="${cas_url}/logout"/>-->
<!--        <beans:constructor-arg>  -->
<!--            <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>  -->
<!--        </beans:constructor-arg>  -->
<!--        <beans:property name="filterProcessesUrl" value="/logout/cas"/>  -->
<!--    </beans:bean>  -->
<!--    &lt;!&ndash; 单点登出  结束 &ndash;&gt;  -->
<!--	-->
<!--</beans:beans>-->